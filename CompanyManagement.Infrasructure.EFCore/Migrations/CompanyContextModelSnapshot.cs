// <auto-generated />
using System;
using CompanyManagement.Infrasructure.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyManagement.Infrasructure.EFCore.Migrations
{
    [DbContext(typeof(CompanyContext))]
    partial class CompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountChecklist", b =>
                {
                    b.Property<long>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChecklistsId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountsId", "ChecklistsId");

                    b.HasIndex("ChecklistsId");

                    b.ToTable("AccountChecklist");
                });

            modelBuilder.Entity("AccountManagement.Domain.RoleAgg.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Average")
                        .HasColumnType("float");

                    b.Property<string>("Brand")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChecklistId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LicenceIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityManagerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("CompanyAccount", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAccount");
                });

            modelBuilder.Entity("CompanyLicenceCategory", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("LicenceCategoriesId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "LicenceCategoriesId");

                    b.HasIndex("LicenceCategoriesId");

                    b.ToTable("CompanyLicenceCategory");
                });

            modelBuilder.Entity("CompanyManagement.Domain.AccountAgg.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChecklistId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeValidateMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PreviousLogin")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("StateCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateCategoryId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.AccountAgg.LoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("LoginAttempts", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Checklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountEmployees")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountFolowers")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GeneralChecklistID")
                        .HasColumnType("bigint");

                    b.Property<long?>("HPEDL380ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("JuniperHardeningID")
                        .HasColumnType("bigint");

                    b.Property<string>("PeopleIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Win2019ID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GeneralChecklistID")
                        .IsUnique()
                        .HasFilter("[GeneralChecklistID] IS NOT NULL");

                    b.HasIndex("HPEDL380ID")
                        .IsUnique()
                        .HasFilter("[HPEDL380ID] IS NOT NULL");

                    b.HasIndex("JuniperHardeningID")
                        .IsUnique()
                        .HasFilter("[JuniperHardeningID] IS NOT NULL");

                    b.HasIndex("Win2019ID")
                        .IsUnique()
                        .HasFilter("[Win2019ID] IS NOT NULL");

                    b.ToTable("Checklists", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.GeneralChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessControlStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AccessControlStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("AccessManagementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AccessManagementStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("AntivirusStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AntivirusStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthenticationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AuthenticationStatusScore")
                        .HasColumnType("bigint");

                    b.Property<double>("AverageGeneral")
                        .HasColumnType("float");

                    b.Property<string>("BackupStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BackupStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessIdentificationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BusinessIdentificationStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("CCTVStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CCTVStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("ClockSynchronizationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ClockSynchronizationStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("ComplianceManagementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ComplianceManagementStatusScore")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CyberAttackResponseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CyberAttackResponseStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("DataDestructionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DataDestructionStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("DataSalesTradeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DataSalesTradeStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("DevelopmentTestOperationsControlStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DevelopmentTestOperationsControlStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeTrainingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeTrainingStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryExitManagementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EntryExitManagementStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("FinallDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialPaymentPlatformStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FinancialPaymentPlatformStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("HostingServiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HostingServiceStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("IncidentResponseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IncidentResponseStatusScore")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogManagementStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LogManagementStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("NetworkLogicalPhysicalMapStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("NetworkLogicalPhysicalMapStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("OrganizationalSecurityStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrganizationalSecurityStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordPolicyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PasswordPolicyStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PersonnelHiringStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonnelHiringStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PhysicalAssetsInventoryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhysicalAssetsInventoryStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PrivacyPolicyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PrivacyPolicyStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("PublicComplaintsStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PublicComplaintsStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("RemoteAdministrativeAccessStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RemoteAdministrativeAccessStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SecureCodingConfigStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecureCodingConfigStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityChangeApprovalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecurityChangeApprovalStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityEvaluationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecurityEvaluationStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityManagerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecurityManagerStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityPolicyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecurityPolicyStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionExpirationStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SessionExpirationStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("ThirdPartyServiceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ThirdPartyServiceStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdateStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("UserDataCollectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserDataCollectionStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("WirelessNetworkStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WirelessNetworkStatusScore")
                        .HasColumnType("bigint");

                    b.Property<string>("ZoningStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ZoningStatusScore")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GeneralChecklists", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.HPEDL380", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AreAppropriateGroupsCreated")
                        .HasColumnType("bigint");

                    b.Property<string>("AreAppropriateGroupsCreateddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreAppropriateUsernamesCreated")
                        .HasColumnType("bigint");

                    b.Property<string>("AreAppropriateUsernamesCreateddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreILOPortAndUSBPortConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreILOPortAndUSBPortConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreInitialILOSettingsConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreInitialILOSettingsConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreInitialSettingsForILOConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreInitialSettingsForILOConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreNetworkSettingsForILOConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreNetworkSettingsForILOConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreProvisioningSettingsDeleted")
                        .HasColumnType("bigint");

                    b.Property<string>("AreProvisioningSettingsDeleteddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreSSHKeysEnabled")
                        .HasColumnType("bigint");

                    b.Property<string>("AreSSHKeysEnableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreSystemCertificatesConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreSystemCertificatesConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AreUserCertificatesConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("AreUserCertificatesConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageHpedl380")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinallDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAccountServiceConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAccountServiceConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<long?>("IsDiskAndRaidConfigDeletionDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsDiskAndRaidConfigDeletionDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsEncryptionConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsEncryptionConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsSecureBootConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsSecureBootConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsServerNameAndFQDNSet")
                        .HasColumnType("bigint");

                    b.Property<string>("IsServerNameAndFQDNSetdescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsTPMConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsTPMConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsTPMEnabledAndRO")
                        .HasColumnType("bigint");

                    b.Property<string>("IsTPMEnabledAndROdescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsUEFISecurityConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsUEFISecurityConfigureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HPEDL380s", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.JuniperHardening", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AreUnusedInterfacesDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("AreUnusedInterfacesDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AverageJuniper")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinallDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAuxiliaryPortDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAuxiliaryPortDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<long?>("IsConfigFileEncrypted")
                        .HasColumnType("bigint");

                    b.Property<string>("IsConfigFileEncrypteddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsConsolePortSecured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsConsolePortSecureddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsCraftInterfaceDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsCraftInterfaceDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsDiagnosticPortDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsDiagnosticPortDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsLCDMenuDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsLCDMenuDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPasswordRecoveryDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPasswordRecoveryDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsResetButtonDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsResetButtonDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRootLoginAuxDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRootLoginAuxDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRootLoginDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRootLoginDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsUSBPortDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsUSBPortDisableddescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JuniperHardenings", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChecklistId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamePeopleCo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhonePeopleCo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RspponsePeopleCo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Win2019", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AverageWin2019")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinallDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAccessTokenCreationLimited")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAccessTokenCreationLimitedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAccountLockoutDurationConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAccountLockoutDurationConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAdminLockoutConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAdminLockoutConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAdministratorUsernameChanged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAdministratorUsernameChangedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsAnonymousSIDRequestManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsAnonymousSIDRequestManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsBackupAccessManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsBackupAccessManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsCachedUsernameCountManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsCachedUsernameCountManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<long?>("IsComplexPasswordRequired")
                        .HasColumnType("bigint");

                    b.Property<string>("IsComplexPasswordRequiredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsDataRetransmissionManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsDataRetransmissionManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsDomainJoinRestricted")
                        .HasColumnType("bigint");

                    b.Property<string>("IsDomainJoinRestrictedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsFailedLogonAttemptsLimited")
                        .HasColumnType("bigint");

                    b.Property<string>("IsFailedLogonAttemptsLimitedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsGuestLogonManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsGuestLogonManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsIRDPOptionDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsIRDPOptionDisabledDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsKeepAliveTimeManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsKeepAliveTimeManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsLocalAccountLogonManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsLocalAccountLogonManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsLocalConsoleLogonRestricted")
                        .HasColumnType("bigint");

                    b.Property<string>("IsLocalConsoleLogonRestrictedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsLogonAsServicePermissionManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsLogonAsServicePermissionManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsLogonAsServiceSettingsApplied")
                        .HasColumnType("bigint");

                    b.Property<string>("IsLogonAsServiceSettingsAppliedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsMaxPasswordAgeConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsMaxPasswordAgeConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsMemoryManagementPermissionGranted")
                        .HasColumnType("bigint");

                    b.Property<string>("IsMemoryManagementPermissionGrantedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsMinPasswordAgeConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsMinPasswordAgeConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsMinPasswordLengthConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsMinPasswordLengthConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsNTFSMediaAccessManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsNTFSMediaAccessManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsOSAccountAccessLimited")
                        .HasColumnType("bigint");

                    b.Property<string>("IsOSAccountAccessLimitedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsOnlineTipManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsOnlineTipManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPasswordExpirationWarningManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPasswordExpirationWarningManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPasswordHistoryEnabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPasswordHistoryEnabledDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPasswordResetErrorCountConfigured")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPasswordResetErrorCountConfiguredDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPlainTextPasswordStorageDisabled")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPlainTextPasswordStorageDisabledDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsPrinterSpoolerServiceManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsPrinterSpoolerServiceManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRemoteAccessManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRemoteAccessManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRemoteLogonGroupManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRemoteLogonGroupManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRemoteLogonRestrictedForGuests")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRemoteLogonRestrictedForGuestsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsRemoteShutdownPermissionManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsRemoteShutdownPermissionManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsScheduledTasksPermissionManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsScheduledTasksPermissionManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsSharedPrinterDriverInstallationManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsSharedPrinterDriverInstallationManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsSystemTimeChangeManaged")
                        .HasColumnType("bigint");

                    b.Property<string>("IsSystemTimeChangeManagedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IsUserAccountManagementRestricted")
                        .HasColumnType("bigint");

                    b.Property<string>("IsUserAccountManagementRestrictedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Win2019s", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.CompanyCategoryAgg.CompanyCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CompanyCategories", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.LicenceCategoryAgg.LicenceCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("LicenceCategories", (string)null);
                });

            modelBuilder.Entity("CompanyManagement.Domain.StatesCategoryAgg.StateCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("StateCategories", (string)null);
                });

            modelBuilder.Entity("AccountChecklist", b =>
                {
                    b.HasOne("CompanyManagement.Domain.AccountAgg.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.Checklist", null)
                        .WithMany()
                        .HasForeignKey("ChecklistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountManagement.Domain.RoleAgg.Role", b =>
                {
                    b.OwnsMany("AccountManagement.Domain.RoleAgg.Permission", "Permissions", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<int>("Code")
                                .HasColumnType("int");

                            b1.Property<long>("RoleId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("RoleId");

                            b1.ToTable("RolePermissions", (string)null);

                            b1.WithOwner("Role")
                                .HasForeignKey("RoleId");

                            b1.Navigation("Role");
                        });

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.HasOne("CompanyManagement.Domain.CompanyCategoryAgg.CompanyCategory", "CompanyCategory")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyCategory");
                });

            modelBuilder.Entity("CompanyAccount", b =>
                {
                    b.HasOne("CompanyManagement.Domain.AccountAgg.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyLicenceCategory", b =>
                {
                    b.HasOne("Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagement.Domain.LicenceCategoryAgg.LicenceCategory", null)
                        .WithMany()
                        .HasForeignKey("LicenceCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManagement.Domain.AccountAgg.Account", b =>
                {
                    b.HasOne("AccountManagement.Domain.RoleAgg.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyManagement.Domain.StatesCategoryAgg.StateCategory", "StateCategory")
                        .WithMany("Accounts")
                        .HasForeignKey("StateCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StateCategory");
                });

            modelBuilder.Entity("CompanyManagement.Domain.AccountAgg.LoginAttempt", b =>
                {
                    b.HasOne("CompanyManagement.Domain.AccountAgg.Account", "Account")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Checklist", b =>
                {
                    b.HasOne("Company", "Company")
                        .WithMany("Checklists")
                        .HasForeignKey("CompanyId");

                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.GeneralChecklist", "GeneralChecklist")
                        .WithOne("Checklist")
                        .HasForeignKey("CompanyManagement.Domain.ChecklistAgg.Checklist", "GeneralChecklistID");

                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.HPEDL380", "HPEDL380")
                        .WithOne("Checklist")
                        .HasForeignKey("CompanyManagement.Domain.ChecklistAgg.Checklist", "HPEDL380ID");

                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.JuniperHardening", "JuniperHardening")
                        .WithOne("Checklist")
                        .HasForeignKey("CompanyManagement.Domain.ChecklistAgg.Checklist", "JuniperHardeningID");

                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.Win2019", "Win2019")
                        .WithOne("Checklist")
                        .HasForeignKey("CompanyManagement.Domain.ChecklistAgg.Checklist", "Win2019ID");

                    b.Navigation("Company");

                    b.Navigation("GeneralChecklist");

                    b.Navigation("HPEDL380");

                    b.Navigation("JuniperHardening");

                    b.Navigation("Win2019");
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Person", b =>
                {
                    b.HasOne("CompanyManagement.Domain.ChecklistAgg.Checklist", "Checklist")
                        .WithMany("People")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("AccountManagement.Domain.RoleAgg.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Company", b =>
                {
                    b.Navigation("Checklists");
                });

            modelBuilder.Entity("CompanyManagement.Domain.AccountAgg.Account", b =>
                {
                    b.Navigation("LoginAttempts");
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Checklist", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.GeneralChecklist", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.HPEDL380", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.JuniperHardening", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManagement.Domain.ChecklistAgg.Win2019", b =>
                {
                    b.Navigation("Checklist")
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyManagement.Domain.CompanyCategoryAgg.CompanyCategory", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("CompanyManagement.Domain.StatesCategoryAgg.StateCategory", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
